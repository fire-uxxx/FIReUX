import{b5 as d,N as y,q as p,b6 as D,b7 as w,b8 as h,b9 as b,ba as $,bb as l,bc as I,bd as m,be as C,bf as S}from"./DLnnSrV4.js";function j(){const o=d(),u=y(),{public:{APP_ID:t}}=p();async function n(r,a){const{slug:e,...f}=a;if(!e)return Promise.reject("[addSluggedDocument] Slug is required.");try{const g=D(o,r,e);return await w(g,{appId:t,...f,created_at:new Date().toISOString(),slug:e}),console.log(`[addSluggedDocument] Created document in '${r}' with ID: ${e}`),e}catch(g){throw console.error(`[addSluggedDocument] Error creating document in '${r}' with ID: ${e}`,g),g}}async function c(r,a){if(!r||!a)return Promise.reject("[createDocument] Collection name and data are required.");try{const e=await h(b(o,r),{appId:t,...a,created_at:new Date().toISOString()});return console.log(`[createDocument] Created document in '${r}' with ID: ${e.id}`),e.id}catch(e){throw console.error(`[createDocument] Error creating document in '${r}':`,e),e}}async function s(r,a){if(!r||!a)return Promise.reject("[createObject] Collection name and data are required.");try{const e=await h(b(o,r),{appId:t,...a,created_at:new Date().toISOString()});return console.log(`[createObject] Created object in '${r}' with ID: ${e.id}`),e.id}catch(e){throw console.error(`[createObject] Error creating object in '${r}':`,e),e}}async function i(r,a){if(!u.value)return Promise.reject("[createEntity] No authenticated user found.");const e=u.value.uid;try{return await w(D(o,r,e),{appId:t,...a,id:e,created_at:new Date().toISOString()}),console.log(`[createEntity] Created entity in '${r}' with ID: ${e}`),e}catch(f){throw console.error(`[createEntity] Error creating entity in '${r}':`,f),f}}return{createDocument:c,createObject:s,createEntity:i,addSluggedDocument:n}}function E(){const o=d();async function u(t,n,c){if(!t||!n||!c)return Promise.reject("❌ Collection name, document ID, and updates are required.");try{await $(D(o,t,n),c),console.log(`✅ Document updated in '${t}' with ID: ${n}`)}catch(s){throw console.error(`❌ Error updating document in '${t}':`,s),s}}return{updateDocument:u}}function P(){const o=d();async function u(t,n){if(!t||!n)throw new Error("Collection name and document ID are required.");const c=D(o,t,n);await l(c),console.log(`✅ Deleted document: ${n} from ${t}`)}return{deleteDocument:u}}function q(){function o(t){const n=d(),{public:{APP_ID:c}}=p(),s=m(b(n,t),C("appId","==",c)),{data:i}=S(s,{ssrKey:t});return{collectionData:i}}function u(t,n){const c=d(),s=D(c,t,n),{data:i}=I(s);return i}return{firestoreFetchCollection:o,firestoreFetchDoc:u,...j(),...E(),...P()}}export{q as a,j as u};
