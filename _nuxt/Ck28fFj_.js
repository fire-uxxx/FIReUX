import{bc as d,N as m,q as y,bd as D,be as h,bf as p,bg as b,bh as I,bi as S,bj as C,bk as l,bl as $,bm as j,bn as E,bo as F}from"./dtMaA3lo.js";function P(){const o=d(),a=m(),{public:{APP_ID:t}}=y();async function n(r,u){const{slug:e,...f}=u;if(!e)return Promise.reject("[addSluggedDocument] Slug is required.");try{const g=D(o,r,e),w=new Date().toISOString();return await h(g,{appId:t,...f,created_at:w,updated_at:w,slug:e}),console.log(`[addSluggedDocument] Created document in '${r}' with ID: ${e}`),e}catch(g){throw console.error(`[addSluggedDocument] Error creating document in '${r}' with ID: ${e}`,g),g}}async function c(r,u){if(!r||!u)return Promise.reject("[createDocument] Collection name and data are required.");try{const e=await p(b(o,r),{appId:t,...u,created_at:new Date().toISOString()});return console.log(`[createDocument] Created document in '${r}' with ID: ${e.id}`),e.id}catch(e){throw console.error(`[createDocument] Error creating document in '${r}':`,e),e}}async function s(r,u){if(!r||!u)return Promise.reject("[createObject] Collection name and data are required.");try{const e=await p(b(o,r),{appId:t,...u,created_at:new Date().toISOString()});return console.log(`[createObject] Created object in '${r}' with ID: ${e.id}`),e.id}catch(e){throw console.error(`[createObject] Error creating object in '${r}':`,e),e}}async function i(r,u){if(!a.value)return Promise.reject("[createEntity] No authenticated user found.");const e=a.value.uid;try{return await h(D(o,r,e),{appId:t,...u,id:e,created_at:new Date().toISOString()}),console.log(`[createEntity] Created entity in '${r}' with ID: ${e}`),e}catch(f){throw console.error(`[createEntity] Error creating entity in '${r}':`,f),f}}return{createDocument:c,createObject:s,createEntity:i,addSluggedDocument:n}}function q(){const o=d();async function a(t,n,c){if(!t||!n||!c)return Promise.reject("❌ Collection name, document ID, and updates are required.");try{await I(D(o,t,n),c),console.log(`✅ Document updated in '${t}' with ID: ${n}`)}catch(s){throw console.error(`❌ Error updating document in '${t}':`,s),s}}return{updateDocument:a}}function O(){const o=d();async function a(t,n){if(!t||!n)throw new Error("Collection name and document ID are required.");const c=D(o,t,n);await S(c),console.log(`✅ Deleted document: ${n} from ${t}`)}return{deleteDocument:a}}function R(){async function o(a,t){const n=C(),c=l(b(n,a),$("slug","==",t));return!(await j(c)).empty}return{checkSlug:o}}function U(){function o(t){const n=d(),{public:{APP_ID:c}}=y(),s=l(b(n,t),$("appId","==",c)),{data:i}=F(s,{ssrKey:t});return{collectionData:i}}function a(t,n){const c=d(),s=D(c,t,n),{data:i}=E(s);return i}return{firestoreFetchCollection:o,firestoreFetchDoc:a,...P(),...q(),...O(),...R()}}export{U as a,R as b,P as u};
